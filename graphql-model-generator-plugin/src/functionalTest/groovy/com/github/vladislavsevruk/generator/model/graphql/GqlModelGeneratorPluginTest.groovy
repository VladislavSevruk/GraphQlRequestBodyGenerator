/*
 * MIT License
 *
 * Copyright (c) 2022 Uladzislau Seuruk
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.github.vladislavsevruk.generator.model.graphql

import org.gradle.testkit.runner.GradleRunner
import spock.lang.Specification
import spock.lang.TempDir

import static org.gradle.testkit.runner.TaskOutcome.SUCCESS

class GqlModelGeneratorPluginTest extends Specification {

    @TempDir
    File testProjectDir
    File buildFile
    File schemaFile

    void setup() {
        buildFile = new File(testProjectDir, 'build.gradle')
        buildFile << """
            plugins {
                id 'java-library'
                id 'com.github.vladislavsevruk.graphql-model-generator-plugin'
            }
        """
        schemaFile = new File(testProjectDir, 'schema.graphqls')
        schemaFile << """
            type Query {
                testQuery(id: ID!): TestType
            }
            
            type Mutation {
                testMutation(input: TestInput!): TestType!
            }
            
            type TestType {
                id: ID!
                related_ids : [ Int! ] # comment
                value: Float
                type: EnumType
            }
            
            enum EnumType {
                VALUE1
                VALUE2
            }
            
            input TestInput {
                id:ID!
                related_ids : [ Int! ] # comment
                value: Float
                type: EnumType
            }
        """
    }

    void "can successfully configure GraphQL model generation through extension and verify it"() {
        buildFile << """
            import com.github.vladislavsevruk.generator.model.graphql.constant.*

            graphqlModelGenerator {
                addJacksonAnnotations = true
                entitiesPrefix = 'Gql'
                entitiesPostfix = 'Dto'
                pathToSchemaFile = '${schemaFile.getAbsolutePath().replace("\\", "\\\\")}'
                targetPackage = 'com.test'
                treatArrayAs = ElementSequence.ARRAY
                treatFloatAs = GqlFloatType.BIG_DECIMAL
                treatIdAs = GqlIntType.LONG
                treatIntAs = GqlIntType.LONG
                updateNamesToJavaStyle = false
                useLombokAnnotations = true
                usePrimitivesInsteadOfWrappers = true
                useStringsInsteadOfEnums = true
            }
        """

        when:
        def result = GradleRunner.create()
                .withProjectDir(testProjectDir)
                .withArguments('generateGraphqlModels')
                .withPluginClasspath()
                .build()

        then:
        result.task(":generateGraphqlModels").outcome == SUCCESS
        String[] expectedItems = ['.configurationHashSum', '.schemaHashSum', 'java']
        String graphqlModelsPath = "${testProjectDir.getAbsolutePath()}${File.separator}build${File.separator}generated\
${File.separator}sources${File.separator}graphqlModels${File.separator}"
        new File(graphqlModelsPath).list() == expectedItems
        String classesPath = "${graphqlModelsPath}java${File.separator}main${File.separator}com${File.separator}test\
${File.separator}"
        String[] expectedFileNames = ['GqlEnumTypeDto.java', 'GqlTestInputDto.java', 'GqlTestTypeDto.java']
        new File(classesPath).list() == expectedFileNames
        new File(classesPath + expectedFileNames[0]).readLines().join("\n") == enumLines()
        new File(classesPath + expectedFileNames[1]).readLines().join("\n") == inputLines()
        new File(classesPath + expectedFileNames[2]).readLines().join("\n") == typeLines()
    }

    String enumLines() {
        '''\
// generated by com.github.vladislavsevruk:java-class-generator
package com.test;

public enum GqlEnumTypeDto {

  VALUE1,
  VALUE2
}\
'''
    }

    String inputLines() {
        '''\
// generated by com.github.vladislavsevruk:java-class-generator
package com.test;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.vladislavsevruk.generator.annotation.GqlField;

import java.math.BigDecimal;

import lombok.Data;
import lombok.experimental.Accessors;

@Accessors(chain = true)
@Data
public class GqlTestInputDto {

  @JsonProperty("id")
  @GqlField(nonNull = true)
  private long id;
  @JsonProperty("related_ids")
  @GqlField(nonNull = true)
  private Long[] related_ids;
  @JsonProperty("value")
  @GqlField
  private BigDecimal value;
  @JsonProperty("type")
  @GqlField
  private GqlEnumTypeDto type;
}\
'''
    }

    String typeLines() {
        '''\
// generated by com.github.vladislavsevruk:java-class-generator
package com.test;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.github.vladislavsevruk.generator.annotation.GqlField;

import java.math.BigDecimal;

import lombok.Data;
import lombok.experimental.Accessors;

@Accessors(chain = true)
@Data
public class GqlTestTypeDto {

  @JsonProperty("id")
  @GqlField(nonNull = true)
  private long id;
  @JsonProperty("related_ids")
  @GqlField(nonNull = true)
  private Long[] related_ids;
  @JsonProperty("value")
  @GqlField
  private BigDecimal value;
  @JsonProperty("type")
  @GqlField
  private String type;
}\
'''
    }
}
